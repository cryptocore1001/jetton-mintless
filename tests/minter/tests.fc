slice get_serialized_address(int workchain, int address) inline {
    return (begin_cell()
        .store_uint(2, 2)  ;; Is std address
        .store_uint(0, 1)  ;; Non-unicast
        .store_uint(workchain, 8)  ;; Basic workchain
        .store_uint(address, 256) ;; Address hash
    ).end_cell().begin_parse();
}

cell get_testcell() inline {
    return begin_cell()
        .store_uint(1, 1)
    .end_cell();
}

() init_storage() inline {
    set_data(begin_cell()        
        .store_coins(0)
        .store_slice(get_serialized_address(0, 0))
        .store_ref(get_testcell())
        .store_ref(get_testcell())
    .end_cell());
}

int __test_mint() {
    init_storage();

    var msg_body = begin_cell()
        .store_uint(21, 32) ;; mint op
        .store_uint(0, 64)
        .store_slice(get_serialized_address(0, 1))  ;;  to_address
        .store_coins(10) ;; amount
        .store_ref(begin_cell() ;; master_msg
            .store_uint(0x18, 6)
            .store_slice(get_serialized_address(0, 30)) ;; address that will receive the tokens
            .store_coins(2) ;; 
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(0x178d4519, 32)
                .store_uint(0, 64)
                .store_coins(10)
                .store_slice(get_serialized_address(0, 30))
                .store_uint(0, 2)
                .store_coins(0)
                .store_slice(null())
            .end_cell())
        .end_cell()) 
    .end_cell();

    var msg = begin_cell()
        .store_uint(0x2, 4)
        .store_slice(get_serialized_address(0, 0)) ;; from owner
        .store_slice(get_serialized_address(0, 1000)) ;; should be contract's address, but who cares?
        .store_coins(10)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
        .store_ref(msg_body)
    .end_cell();
    
    var (int gas_used1, _) = invoke_method(recv_internal, [10, 10, msg, msg_body.begin_parse()]);
    var (int gas_used2, stack) = invoke_method(get_jetton_data, []);
    [int total_supply, int mutable, slice admin_address, cell content, cell jetton_wallet_code] = stack;
    throw_if(101, total_supply != 10);
    return gas_used1 + gas_used2;
}   